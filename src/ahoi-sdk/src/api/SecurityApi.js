/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Security from '../model/Security';

/**
* Security service.
* @module api/SecurityApi
* @version 2.1.0
*/
export default class SecurityApi {

    /**
    * Constructs a new SecurityApi. 
    * @alias module:api/SecurityApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSecurity operation.
     * @callback module:api/SecurityApi~getSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Security} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get security
     * @param {String} accessId 
     * @param {String} accountId The **accountId** for which to retrieve securities
     * @param {String} securityId The **securityId** for the security to retrieve
     * @param {module:api/SecurityApi~getSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Security}
     */
    getSecurity(accessId, accountId, securityId, callback) {
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling getSecurity");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getSecurity");
      }

      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling getSecurity");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId,
        'securityId': securityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Security;

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/securities/{securityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurities operation.
     * @callback module:api/SecurityApi~listSecuritiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Security>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List securities for account
     * @param {String} accessId 
     * @param {String} accountId The **accountId** for which to retrieve securities
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxAge Optional - defines maximum age (in seconds) of cached account data provided by the bank.         A \&quot;maxAge\&quot; of 3600 will not trigger an update of the account securities, when last         refresh has been done 2000 seconds ago.
     * @param {module:api/SecurityApi~listSecuritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Security>}
     */
    listSecurities(accessId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling listSecurities");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listSecurities");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId
      };
      let queryParams = {
        'max-age': opts['maxAge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Security];

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/securities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
