/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Challenge from '../model/Challenge';
import ChallengeResponse from '../model/ChallengeResponse';
import Task from '../model/Task';

/**
* Task service.
* @module api/TaskApi
* @version 2.1.0
*/
export default class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChallenge operation.
     * @callback module:api/TaskApi~getChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Challenge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch challenge
     * Fetch challenge for asynchronous running task item from AHOI.
     * @param {String} taskId The **id** for the Task.
     * @param {module:api/TaskApi~getChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Challenge}
     */
    getChallenge(taskId, callback) {
      let postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getChallenge");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Challenge;

      return this.apiClient.callApi(
        '/tasks/{taskId}/challenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTask operation.
     * @callback module:api/TaskApi~getTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch task
     * Fetch asynchronous running task item and its state from AHOI.
     * @param {String} taskId The **id** for the access to retrieve.
     * @param {module:api/TaskApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    getTask(taskId, callback) {
      let postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTask");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postChallengeResponse operation.
     * @callback module:api/TaskApi~postChallengeResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize task
     * Provide an authorization information (e.g. TAN) to an asynchronous running task.
     * @param {String} taskId The **id** for the Task.
     * @param {module:model/ChallengeResponse} challengeResponse the response to process
     * @param {module:api/TaskApi~postChallengeResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    postChallengeResponse(taskId, challengeResponse, callback) {
      let postBody = challengeResponse;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling postChallengeResponse");
      }

      // verify the required parameter 'challengeResponse' is set
      if (challengeResponse === undefined || challengeResponse === null) {
        throw new Error("Missing the required parameter 'challengeResponse' when calling postChallengeResponse");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{taskId}/authorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
