/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TransactionPattern from '../model/TransactionPattern';

/**
* TransactionPattern service.
* @module api/TransactionPatternApi
* @version 2.1.0
*/
export default class TransactionPatternApi {

    /**
    * Constructs a new TransactionPatternApi. 
    * @alias module:api/TransactionPatternApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateTransactionPattern operation.
     * @callback module:api/TransactionPatternApi~activateTransactionPatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionPattern} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a transaction pattern
     * Disabling the transaction pattern results in ignoring the pattern in the forecast. The transaction still exists and relations with transactions are not modified.
     * @param {String} accessId The **accessId** for which to activate the pattern
     * @param {String} accountId The **accountId** for which to activate the pattern
     * @param {String} patternId The **patternId** to (de)activate
     * @param {Boolean} activated If &#x60;true&#x60;, the pattern will be used for forecast calculations;         &#x60;false&#x60; will be ignored
     * @param {module:api/TransactionPatternApi~activateTransactionPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionPattern}
     */
    activateTransactionPattern(accessId, accountId, patternId, activated, callback) {
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling activateTransactionPattern");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling activateTransactionPattern");
      }

      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling activateTransactionPattern");
      }

      // verify the required parameter 'activated' is set
      if (activated === undefined || activated === null) {
        throw new Error("Missing the required parameter 'activated' when calling activateTransactionPattern");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId,
        'patternId': patternId,
        'activated': activated
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionPattern;

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}/active/{activated}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransactionPattern operation.
     * @callback module:api/TransactionPatternApi~deleteTransactionPatternCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete transaction pattern
     * Delete the transaction pattern identified by the **patternId**. All associated transactions will be updated to {{patternId &#x3D; null}}.
     * @param {String} accessId The **accessId** for the transaction pattern to delete
     * @param {String} accountId The **accountId** for the transaction pattern to delete
     * @param {String} patternId The **patternId** to delete
     * @param {module:api/TransactionPatternApi~deleteTransactionPatternCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTransactionPattern(accessId, accountId, patternId, callback) {
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling deleteTransactionPattern");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteTransactionPattern");
      }

      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling deleteTransactionPattern");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionPattern operation.
     * @callback module:api/TransactionPatternApi~getTransactionPatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionPattern} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction pattern
     * Returns the transaction pattern identified by **patternId** in relationship with  **accountId**.
     * @param {String} accessId The **accessId** for the pattern to retrieve
     * @param {String} accountId The **accoundId** for the pattern to retrieve
     * @param {String} patternId The **patternId** for the pattern to retrieve
     * @param {module:api/TransactionPatternApi~getTransactionPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionPattern}
     */
    getTransactionPattern(accessId, accountId, patternId, callback) {
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling getTransactionPattern");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactionPattern");
      }

      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling getTransactionPattern");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionPattern;

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactionPatterns operation.
     * @callback module:api/TransactionPatternApi~listTransactionPatternsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionPattern>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transaction patterns for account
     * Returns all transaction pattern for **accountId**. Transaction patterns are recurring transactions automatically identified by the server or manually created via [create transaction pattern](#!/Transaction_pattern/postTransactionPattern).
     * @param {String} accessId The **accessId** for which to retrieve transaction patterns
     * @param {String} accountId The **accountId** for which to retrieve transaction patterns
     * @param {module:api/TransactionPatternApi~listTransactionPatternsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionPattern>}
     */
    listTransactionPatterns(accessId, accountId, callback) {
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling listTransactionPatterns");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listTransactionPatterns");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionPattern];

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactionpatterns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransactionPattern operation.
     * @callback module:api/TransactionPatternApi~postTransactionPatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionPattern} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pattern
     * Create a new pattern for an **accountId**. The **cycle** can be one of &#x60;MONTHLY&#x60;, &#x60;QUARTERLY&#x60;, &#x60;SEMI_ANNUALLY&#x60; or &#x60;ANNUALLY&#x60;. The **day** can be between &#x60;1&#x60; and &#x60;366&#x60;, depending on **cycle**:  | cycle | day range | example | | --- | --- | --- | | &#x60;MONTHLY&#x60; | &#x60;1&#x60;-&#x60;31&#x60;  | every 29th of the month &#x3D;&gt; &#x60;29&#x60; | | &#x60;QUARTERLY&#x60; | &#x60;1&#x60;-&#x60;92&#x60;  | 23rd of February (23rd of May, etc.) &#x3D;&gt; &#x60;54&#x60; (31 [complete first month] + 23 [days in second month]) | | &#x60;SEMI_ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;184&#x60; | 1st of May and 1st of November &#x3D;&gt; &#x60;121&#x60; (for first half of year: 31 + 28 + 31 + 30 + 1) | | &#x60;ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;366&#x60; | 24th of December &#x3D;&gt; &#x60;358&#x60; |  If a similar pattern already exists, you will receive an HTTP status code 409.
     * @param {String} accessId The **accessId** to which the new created pattern is associated with
     * @param {String} accountId The **accountId** to which the new created pattern is associated with
     * @param {module:model/TransactionPattern} transactionPatternDto The transaction pattern to create
     * @param {module:api/TransactionPatternApi~postTransactionPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionPattern}
     */
    postTransactionPattern(accessId, accountId, transactionPatternDto, callback) {
      let postBody = transactionPatternDto;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling postTransactionPattern");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling postTransactionPattern");
      }

      // verify the required parameter 'transactionPatternDto' is set
      if (transactionPatternDto === undefined || transactionPatternDto === null) {
        throw new Error("Missing the required parameter 'transactionPatternDto' when calling postTransactionPattern");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionPattern;

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactionpatterns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
