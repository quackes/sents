/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Transaction from '../model/Transaction';

/**
* Transaction service.
* @module api/TransactionApi
* @version 2.1.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTransaction operation.
     * @callback module:api/TransactionApi~getTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction
     * Returns the transaction identified by **transactionId** in relationship with **accountId**.
     * @param {String} accessId The **accessId** for the transaction to retrieve
     * @param {String} accountId The **accountId** for the transaction to retrieve
     * @param {String} transactionId The **transactionId** for the pattern to retrieve
     * @param {module:api/TransactionApi~getTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    getTransaction(accessId, accountId, transactionId, callback) {
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling getTransaction");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransaction");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransaction");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId,
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:api/TransactionApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions for account
     * Retrieve all transactions for **accountId**.
     * @param {String} accessId The **accessId** for which to retrieve transactions.
     * @param {String} accountId The **accountId** for which to retrieve transactions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxAge Optional - defines maximum age (in seconds) of cached account data provided by the bank.          A \&quot;maxAge\&quot; of 3600 will not trigger an update of transactions, when last refresh has          been done 2000 seconds ago.
     * @param {Number} opts.limit Optional — limit the number of returned transactions
     * @param {Number} opts.offset Optional — skip the first **offset** transactions in result
     * @param {String} opts.from Optional — only return transactions with booking date later than **from**; an ISO8601 Month(2014-11), Date (2014-11-17) or DateTime         (2014-11-17T12:00:00Z)
     * @param {String} opts.to Optional — only return transactions with booking date prior or equal to **to**; an ISO8601 Date, Month or DateTime
     * @param {module:api/TransactionApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    listTransactions(accessId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling listTransactions");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listTransactions");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId
      };
      let queryParams = {
        'max-age': opts['maxAge'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Transaction];

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactionsForPattern operation.
     * @callback module:api/TransactionApi~listTransactionsForPatternCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions for pattern
     * Retrieve all transactions for **patternId**.
     * @param {String} accessId The **accessId** for which to retrieve transactions
     * @param {String} accountId The **accountId** for which to retrieve transactions
     * @param {String} patternId The **patternId** for which to retrieve transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxAge Optional - defines maximum age (in seconds) of cached account data provided by the bank.       A \&quot;maxAge\&quot; of 3600 will not trigger an update of transactions, when last refresh has       been done 2000 seconds ago.
     * @param {Number} opts.limit Optional — limit the number of returned transactions
     * @param {Number} opts.offset Optional — skip the first **offset** transactions in result
     * @param {String} opts.from Optional — only return transactions with a booking date later than **from**; an ISO8601 Month(2014-11), Date (2014-11-17) or DateTime         (2014-11-17T12:00:00Z)
     * @param {String} opts.to Optional — only return transactions with a booking date prior or equal to **to**; an ISO8601 Date, Month or DateTime
     * @param {module:api/TransactionApi~listTransactionsForPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    listTransactionsForPattern(accessId, accountId, patternId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling listTransactionsForPattern");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listTransactionsForPattern");
      }

      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling listTransactionsForPattern");
      }


      let pathParams = {
        'accessId': accessId,
        'accountId': accountId,
        'patternId': patternId
      };
      let queryParams = {
        'max-age': opts['maxAge'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Transaction];

      return this.apiClient.callApi(
        '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
