/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AccessDescription from './AccessDescription';





/**
* The Provider model module.
* @module model/Provider
* @version 2.1.0
*/
export default class Provider {
    /**
    * Constructs a new <code>Provider</code>.
    * @alias module:model/Provider
    * @class
    * @param id {String} UUID of this provider. A constant to identify provider even when  e.g. their bank code changes (provided type is BankProvider)
    * @param name {String} Name of this provider e.g. \"Hamburger Bank\"
    * @param location {String} Location of this provider e.g. \"Hamburg\"
    * @param supported {Boolean} Whether this bank is supported by AHOI-API, i.e. whether you can use a connection of this provider.
    * @param type {String} Discriminator for subtypes. At the moment only `BankProvider` is supported.
    */

    constructor(id, name, location, supported, type) {
        

        
        

        this['id'] = id;this['name'] = name;this['location'] = location;this['supported'] = supported;this['type'] = type;

        
    }

    /**
    * Constructs a <code>Provider</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Provider} obj Optional instance to populate.
    * @return {module:model/Provider} The populated <code>Provider</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Provider();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('accessDescription')) {
                obj['accessDescription'] = AccessDescription.constructFromObject(data['accessDescription']);
            }
            if (data.hasOwnProperty('supported')) {
                obj['supported'] = ApiClient.convertToType(data['supported'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
    * UUID of this provider. A constant to identify provider even when  e.g. their bank code changes (provided type is BankProvider)
    * @member {String} id
    */
    id = undefined;
    /**
    * Name of this provider e.g. \"Hamburger Bank\"
    * @member {String} name
    */
    name = undefined;
    /**
    * Location of this provider e.g. \"Hamburg\"
    * @member {String} location
    */
    location = undefined;
    /**
    * Description of the access for the account-setup e.g. UI-input-fields
    * @member {module:model/AccessDescription} accessDescription
    */
    accessDescription = undefined;
    /**
    * Whether this bank is supported by AHOI-API, i.e. whether you can use a connection of this provider.
    * @member {Boolean} supported
    */
    supported = undefined;
    /**
    * Discriminator for subtypes. At the moment only `BankProvider` is supported.
    * @member {String} type
    */
    type = undefined;








}


