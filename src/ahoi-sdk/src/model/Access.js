/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AccessFieldsMap from './AccessFieldsMap';





/**
* The Access model module.
* @module model/Access
* @version 2.1.0
*/
export default class Access {
    /**
    * Constructs a new <code>Access</code>.
    * @alias module:model/Access
    * @class
    * @param providerId {String} Identifier of the provider to which this access belongs
    * @param accessFields {module:model/AccessFieldsMap} Authentication data for the given provider as map of InputFieldId to String (e.g., `{\"USERNAME\", \"yourName\"}`)  The fields necessary for the access are determined by the   InputField descriptions of the related provider.
    * @param type {String} Discriminator for subtypes. At the moment only `BankAccess` is supported.
    */

    constructor(providerId, accessFields, type) {
        

        
        

        this['providerId'] = providerId;this['accessFields'] = accessFields;this['type'] = type;

        
    }

    /**
    * Constructs a <code>Access</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Access} obj Optional instance to populate.
    * @return {module:model/Access} The populated <code>Access</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Access();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('accessFields')) {
                obj['accessFields'] = AccessFieldsMap.constructFromObject(data['accessFields']);
            }
            if (data.hasOwnProperty('validationState')) {
                obj['validationState'] = ApiClient.convertToType(data['validationState'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
    * Internal ID of this access (generated value)
    * @member {String} id
    */
    id = undefined;
    /**
    * Identifier of the provider to which this access belongs
    * @member {String} providerId
    */
    providerId = undefined;
    /**
    * Authentication data for the given provider as map of InputFieldId to String (e.g., `{\"USERNAME\", \"yourName\"}`)  The fields necessary for the access are determined by the   InputField descriptions of the related provider.
    * @member {module:model/AccessFieldsMap} accessFields
    */
    accessFields = undefined;
    /**
    * The state reflects the validity of the access credentials. The state can change after communicating with the provider.  It can be OK (access credentials are valid); `ACCESS_LOCKED` (access is locked: This can happen when, for example, someone tried to login to your account by  using an incorrect PIN too many times or if your account was used for illegal purposes — automatic refresh will be disabled); or `ACCESS_WRONG` (access wrong: Saved  credentials are incorrect and no communication with the provider is possible — automatic refresh will be disabled)
    * @member {module:model/Access.ValidationStateEnum} validationState
    */
    validationState = undefined;
    /**
    * Discriminator for subtypes. At the moment only `BankAccess` is supported.
    * @member {String} type
    */
    type = undefined;






    /**
    * Allowed values for the <code>validationState</code> property.
    * @enum {String}
    * @readonly
    */
    static ValidationStateEnum = {
    
        /**
         * value: "OK"
         * @const
         */
        "OK": "OK",
    
        /**
         * value: "ACCESS_LOCKED"
         * @const
         */
        "ACCESS_LOCKED": "ACCESS_LOCKED",
    
        /**
         * value: "ACCESS_WRONG"
         * @const
         */
        "ACCESS_WRONG": "ACCESS_WRONG"    
    };



}


