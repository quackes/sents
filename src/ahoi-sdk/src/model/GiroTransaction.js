/**
 * 
 * [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AdditionalInformation from './AdditionalInformation';
import Amount from './Amount';
import Transaction from './Transaction';





/**
* The GiroTransaction model module.
* @module model/GiroTransaction
* @version 2.1.0
*/
export default class GiroTransaction extends Transaction {
    /**
    * Constructs a new <code>GiroTransaction</code>.
    * @alias module:model/GiroTransaction
    * @class
    * @extends module:model/Transaction
    * @param id {String} Internal ID of this transaction (generated value)
    * @param type {String} Discriminator for subtypes. At the moment only `GiroTransaction` is supported.
    * @param amount {module:model/Amount} Amount value
    * @param bookingDate {Date} Booking date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")
    * @param valueDate {Date} Value Date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")
    * @param creditor {String} Creditor's name
    * @param debtor {String} Debtor's name
    * @param purpose {String} Purpose (as given by the provider)
    * @param prebooked {Boolean} Flag to identify if the transaction is marked as pre-booked
    * @param bookingKey {String} Booking key for transaction
    */

    constructor(id, type, amount, bookingDate, valueDate, creditor, debtor, purpose, prebooked, bookingKey) {
        

        super(id, type);
        

        this['amount'] = amount;this['bookingDate'] = bookingDate;this['valueDate'] = valueDate;this['creditor'] = creditor;this['debtor'] = debtor;this['purpose'] = purpose;this['prebooked'] = prebooked;this['bookingKey'] = bookingKey;

        
    }

    /**
    * Constructs a <code>GiroTransaction</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GiroTransaction} obj Optional instance to populate.
    * @return {module:model/GiroTransaction} The populated <code>GiroTransaction</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GiroTransaction();

            

            Transaction.constructFromObject(data, obj);
            

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('bookingDate')) {
                obj['bookingDate'] = ApiClient.convertToType(data['bookingDate'], 'Date');
            }
            if (data.hasOwnProperty('valueDate')) {
                obj['valueDate'] = ApiClient.convertToType(data['valueDate'], 'Date');
            }
            if (data.hasOwnProperty('creditor')) {
                obj['creditor'] = ApiClient.convertToType(data['creditor'], 'String');
            }
            if (data.hasOwnProperty('creditorBankCode')) {
                obj['creditorBankCode'] = ApiClient.convertToType(data['creditorBankCode'], 'String');
            }
            if (data.hasOwnProperty('creditorAccountNumber')) {
                obj['creditorAccountNumber'] = ApiClient.convertToType(data['creditorAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('debtor')) {
                obj['debtor'] = ApiClient.convertToType(data['debtor'], 'String');
            }
            if (data.hasOwnProperty('debtorBankCode')) {
                obj['debtorBankCode'] = ApiClient.convertToType(data['debtorBankCode'], 'String');
            }
            if (data.hasOwnProperty('debtorAccountNumber')) {
                obj['debtorAccountNumber'] = ApiClient.convertToType(data['debtorAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('cleanPurpose')) {
                obj['cleanPurpose'] = ApiClient.convertToType(data['cleanPurpose'], 'String');
            }
            if (data.hasOwnProperty('prebooked')) {
                obj['prebooked'] = ApiClient.convertToType(data['prebooked'], 'Boolean');
            }
            if (data.hasOwnProperty('bookingKey')) {
                obj['bookingKey'] = ApiClient.convertToType(data['bookingKey'], 'String');
            }
        }
        return obj;
    }

    /**
    * Amount value
    * @member {module:model/Amount} amount
    */
    amount = undefined;
    /**
    * Booking date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")
    * @member {Date} bookingDate
    */
    bookingDate = undefined;
    /**
    * Value Date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")
    * @member {Date} valueDate
    */
    valueDate = undefined;
    /**
    * Creditor's name
    * @member {String} creditor
    */
    creditor = undefined;
    /**
    * Creditor's bank code or BIC
    * @member {String} creditorBankCode
    */
    creditorBankCode = undefined;
    /**
    * Creditor's account number or IBAN
    * @member {String} creditorAccountNumber
    */
    creditorAccountNumber = undefined;
    /**
    * Debtor's name
    * @member {String} debtor
    */
    debtor = undefined;
    /**
    * Debtor's bank code or BIC
    * @member {String} debtorBankCode
    */
    debtorBankCode = undefined;
    /**
    * Debtor's account number or IBAN
    * @member {String} debtorAccountNumber
    */
    debtorAccountNumber = undefined;
    /**
    * Purpose (as given by the provider)
    * @member {String} purpose
    */
    purpose = undefined;
    /**
    * Cleaned purpose. Some SEPA information is filtered out (e.g., \"KREF+-1434947533-2...\")
    * @member {String} cleanPurpose
    */
    cleanPurpose = undefined;
    /**
    * Flag to identify if the transaction is marked as pre-booked
    * @member {Boolean} prebooked
    */
    prebooked = undefined;
    /**
    * Booking key for transaction
    * @member {String} bookingKey
    */
    bookingKey = undefined;








}


